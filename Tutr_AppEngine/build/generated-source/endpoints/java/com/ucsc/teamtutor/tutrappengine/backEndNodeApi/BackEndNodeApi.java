/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2014-11-17 18:43:33 UTC)
 * on 2015-01-13 at 08:18:22 UTC 
 * Modify at your own risk.
 */

package com.ucsc.teamtutor.tutrappengine.backEndNodeApi;

/**
 * Service definition for BackEndNodeApi (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link BackEndNodeApiRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class BackEndNodeApi extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.19.1 of the backEndNodeApi library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://myApplicationId.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "backEndNodeApi/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public BackEndNodeApi(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  BackEndNodeApi(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * Create a request for the method "createStudent".
   *
   * This request holds the parameters needed by the backEndNodeApi server.  After setting any
   * optional parameters, call the {@link CreateStudent#execute()} method to invoke the remote
   * operation.
   *
   * @param pw
   * @param content the {@link com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.Student}
   * @return the request
   */
  public CreateStudent createStudent(java.lang.String pw, com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.Student content) throws java.io.IOException {
    CreateStudent result = new CreateStudent(pw, content);
    initialize(result);
    return result;
  }

  public class CreateStudent extends BackEndNodeApiRequest<com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.ConfirmValue> {

    private static final String REST_PATH = "backendnode/{pw}";

    /**
     * Create a request for the method "createStudent".
     *
     * This request holds the parameters needed by the the backEndNodeApi server.  After setting any
     * optional parameters, call the {@link CreateStudent#execute()} method to invoke the remote
     * operation. <p> {@link CreateStudent#initialize(com.google.api.client.googleapis.services.Abstra
     * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param pw
     * @param content the {@link com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.Student}
     * @since 1.13
     */
    protected CreateStudent(java.lang.String pw, com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.Student content) {
      super(BackEndNodeApi.this, "POST", REST_PATH, content, com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.ConfirmValue.class);
      this.pw = com.google.api.client.util.Preconditions.checkNotNull(pw, "Required parameter pw must be specified.");
    }

    @Override
    public CreateStudent setAlt(java.lang.String alt) {
      return (CreateStudent) super.setAlt(alt);
    }

    @Override
    public CreateStudent setFields(java.lang.String fields) {
      return (CreateStudent) super.setFields(fields);
    }

    @Override
    public CreateStudent setKey(java.lang.String key) {
      return (CreateStudent) super.setKey(key);
    }

    @Override
    public CreateStudent setOauthToken(java.lang.String oauthToken) {
      return (CreateStudent) super.setOauthToken(oauthToken);
    }

    @Override
    public CreateStudent setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (CreateStudent) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public CreateStudent setQuotaUser(java.lang.String quotaUser) {
      return (CreateStudent) super.setQuotaUser(quotaUser);
    }

    @Override
    public CreateStudent setUserIp(java.lang.String userIp) {
      return (CreateStudent) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String pw;

    /**

     */
    public java.lang.String getPw() {
      return pw;
    }

    public CreateStudent setPw(java.lang.String pw) {
      this.pw = pw;
      return this;
    }

    @Override
    public CreateStudent set(String parameterName, Object value) {
      return (CreateStudent) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "createTutor".
   *
   * This request holds the parameters needed by the backEndNodeApi server.  After setting any
   * optional parameters, call the {@link CreateTutor#execute()} method to invoke the remote
   * operation.
   *
   * @param pw
   * @param content the {@link com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.Tutor}
   * @return the request
   */
  public CreateTutor createTutor(java.lang.String pw, com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.Tutor content) throws java.io.IOException {
    CreateTutor result = new CreateTutor(pw, content);
    initialize(result);
    return result;
  }

  public class CreateTutor extends BackEndNodeApiRequest<com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.ConfirmValue> {

    private static final String REST_PATH = "create_tutor";

    /**
     * Create a request for the method "createTutor".
     *
     * This request holds the parameters needed by the the backEndNodeApi server.  After setting any
     * optional parameters, call the {@link CreateTutor#execute()} method to invoke the remote
     * operation. <p> {@link
     * CreateTutor#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param pw
     * @param content the {@link com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.Tutor}
     * @since 1.13
     */
    protected CreateTutor(java.lang.String pw, com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.Tutor content) {
      super(BackEndNodeApi.this, "POST", REST_PATH, content, com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.ConfirmValue.class);
      this.pw = com.google.api.client.util.Preconditions.checkNotNull(pw, "Required parameter pw must be specified.");
    }

    @Override
    public CreateTutor setAlt(java.lang.String alt) {
      return (CreateTutor) super.setAlt(alt);
    }

    @Override
    public CreateTutor setFields(java.lang.String fields) {
      return (CreateTutor) super.setFields(fields);
    }

    @Override
    public CreateTutor setKey(java.lang.String key) {
      return (CreateTutor) super.setKey(key);
    }

    @Override
    public CreateTutor setOauthToken(java.lang.String oauthToken) {
      return (CreateTutor) super.setOauthToken(oauthToken);
    }

    @Override
    public CreateTutor setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (CreateTutor) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public CreateTutor setQuotaUser(java.lang.String quotaUser) {
      return (CreateTutor) super.setQuotaUser(quotaUser);
    }

    @Override
    public CreateTutor setUserIp(java.lang.String userIp) {
      return (CreateTutor) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String pw;

    /**

     */
    public java.lang.String getPw() {
      return pw;
    }

    public CreateTutor setPw(java.lang.String pw) {
      this.pw = pw;
      return this;
    }

    @Override
    public CreateTutor set(String parameterName, Object value) {
      return (CreateTutor) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "deleteStudent".
   *
   * This request holds the parameters needed by the backEndNodeApi server.  After setting any
   * optional parameters, call the {@link DeleteStudent#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.Student}
   * @return the request
   */
  public DeleteStudent deleteStudent(com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.Student content) throws java.io.IOException {
    DeleteStudent result = new DeleteStudent(content);
    initialize(result);
    return result;
  }

  public class DeleteStudent extends BackEndNodeApiRequest<com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.ConfirmValue> {

    private static final String REST_PATH = "backendnode";

    /**
     * Create a request for the method "deleteStudent".
     *
     * This request holds the parameters needed by the the backEndNodeApi server.  After setting any
     * optional parameters, call the {@link DeleteStudent#execute()} method to invoke the remote
     * operation. <p> {@link DeleteStudent#initialize(com.google.api.client.googleapis.services.Abstra
     * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param content the {@link com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.Student}
     * @since 1.13
     */
    protected DeleteStudent(com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.Student content) {
      super(BackEndNodeApi.this, "DELETE", REST_PATH, content, com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.ConfirmValue.class);
    }

    @Override
    public DeleteStudent setAlt(java.lang.String alt) {
      return (DeleteStudent) super.setAlt(alt);
    }

    @Override
    public DeleteStudent setFields(java.lang.String fields) {
      return (DeleteStudent) super.setFields(fields);
    }

    @Override
    public DeleteStudent setKey(java.lang.String key) {
      return (DeleteStudent) super.setKey(key);
    }

    @Override
    public DeleteStudent setOauthToken(java.lang.String oauthToken) {
      return (DeleteStudent) super.setOauthToken(oauthToken);
    }

    @Override
    public DeleteStudent setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (DeleteStudent) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public DeleteStudent setQuotaUser(java.lang.String quotaUser) {
      return (DeleteStudent) super.setQuotaUser(quotaUser);
    }

    @Override
    public DeleteStudent setUserIp(java.lang.String userIp) {
      return (DeleteStudent) super.setUserIp(userIp);
    }

    @Override
    public DeleteStudent set(String parameterName, Object value) {
      return (DeleteStudent) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "deleteTutor".
   *
   * This request holds the parameters needed by the backEndNodeApi server.  After setting any
   * optional parameters, call the {@link DeleteTutor#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.Tutor}
   * @return the request
   */
  public DeleteTutor deleteTutor(com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.Tutor content) throws java.io.IOException {
    DeleteTutor result = new DeleteTutor(content);
    initialize(result);
    return result;
  }

  public class DeleteTutor extends BackEndNodeApiRequest<com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.ConfirmValue> {

    private static final String REST_PATH = "deletetutor";

    /**
     * Create a request for the method "deleteTutor".
     *
     * This request holds the parameters needed by the the backEndNodeApi server.  After setting any
     * optional parameters, call the {@link DeleteTutor#execute()} method to invoke the remote
     * operation. <p> {@link
     * DeleteTutor#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.Tutor}
     * @since 1.13
     */
    protected DeleteTutor(com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.Tutor content) {
      super(BackEndNodeApi.this, "DELETE", REST_PATH, content, com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.ConfirmValue.class);
    }

    @Override
    public DeleteTutor setAlt(java.lang.String alt) {
      return (DeleteTutor) super.setAlt(alt);
    }

    @Override
    public DeleteTutor setFields(java.lang.String fields) {
      return (DeleteTutor) super.setFields(fields);
    }

    @Override
    public DeleteTutor setKey(java.lang.String key) {
      return (DeleteTutor) super.setKey(key);
    }

    @Override
    public DeleteTutor setOauthToken(java.lang.String oauthToken) {
      return (DeleteTutor) super.setOauthToken(oauthToken);
    }

    @Override
    public DeleteTutor setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (DeleteTutor) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public DeleteTutor setQuotaUser(java.lang.String quotaUser) {
      return (DeleteTutor) super.setQuotaUser(quotaUser);
    }

    @Override
    public DeleteTutor setUserIp(java.lang.String userIp) {
      return (DeleteTutor) super.setUserIp(userIp);
    }

    @Override
    public DeleteTutor set(String parameterName, Object value) {
      return (DeleteTutor) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getNearestTutors".
   *
   * This request holds the parameters needed by the backEndNodeApi server.  After setting any
   * optional parameters, call the {@link GetNearestTutors#execute()} method to invoke the remote
   * operation.
   *
   * @param subject
   * @param longitude
   * @param latitude
   * @return the request
   */
  public GetNearestTutors getNearestTutors(java.lang.String subject, java.lang.Double longitude, java.lang.Double latitude) throws java.io.IOException {
    GetNearestTutors result = new GetNearestTutors(subject, longitude, latitude);
    initialize(result);
    return result;
  }

  public class GetNearestTutors extends BackEndNodeApiRequest<com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.TutorCollection> {

    private static final String REST_PATH = "backendnode/{subject}/{longitude}/{latitude}";

    /**
     * Create a request for the method "getNearestTutors".
     *
     * This request holds the parameters needed by the the backEndNodeApi server.  After setting any
     * optional parameters, call the {@link GetNearestTutors#execute()} method to invoke the remote
     * operation. <p> {@link GetNearestTutors#initialize(com.google.api.client.googleapis.services.Abs
     * tractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param subject
     * @param longitude
     * @param latitude
     * @since 1.13
     */
    protected GetNearestTutors(java.lang.String subject, java.lang.Double longitude, java.lang.Double latitude) {
      super(BackEndNodeApi.this, "GET", REST_PATH, null, com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.TutorCollection.class);
      this.subject = com.google.api.client.util.Preconditions.checkNotNull(subject, "Required parameter subject must be specified.");
      this.longitude = com.google.api.client.util.Preconditions.checkNotNull(longitude, "Required parameter longitude must be specified.");
      this.latitude = com.google.api.client.util.Preconditions.checkNotNull(latitude, "Required parameter latitude must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetNearestTutors setAlt(java.lang.String alt) {
      return (GetNearestTutors) super.setAlt(alt);
    }

    @Override
    public GetNearestTutors setFields(java.lang.String fields) {
      return (GetNearestTutors) super.setFields(fields);
    }

    @Override
    public GetNearestTutors setKey(java.lang.String key) {
      return (GetNearestTutors) super.setKey(key);
    }

    @Override
    public GetNearestTutors setOauthToken(java.lang.String oauthToken) {
      return (GetNearestTutors) super.setOauthToken(oauthToken);
    }

    @Override
    public GetNearestTutors setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetNearestTutors) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetNearestTutors setQuotaUser(java.lang.String quotaUser) {
      return (GetNearestTutors) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetNearestTutors setUserIp(java.lang.String userIp) {
      return (GetNearestTutors) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String subject;

    /**

     */
    public java.lang.String getSubject() {
      return subject;
    }

    public GetNearestTutors setSubject(java.lang.String subject) {
      this.subject = subject;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Double longitude;

    /**

     */
    public java.lang.Double getLongitude() {
      return longitude;
    }

    public GetNearestTutors setLongitude(java.lang.Double longitude) {
      this.longitude = longitude;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Double latitude;

    /**

     */
    public java.lang.Double getLatitude() {
      return latitude;
    }

    public GetNearestTutors setLatitude(java.lang.Double latitude) {
      this.latitude = latitude;
      return this;
    }

    @Override
    public GetNearestTutors set(String parameterName, Object value) {
      return (GetNearestTutors) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "tutorLogIn".
   *
   * This request holds the parameters needed by the backEndNodeApi server.  After setting any
   * optional parameters, call the {@link TutorLogIn#execute()} method to invoke the remote operation.
   *
   * @param email
   * @param password
   * @return the request
   */
  public TutorLogIn tutorLogIn(java.lang.String email, java.lang.String password) throws java.io.IOException {
    TutorLogIn result = new TutorLogIn(email, password);
    initialize(result);
    return result;
  }

  public class TutorLogIn extends BackEndNodeApiRequest<com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.Tutor> {

    private static final String REST_PATH = "tutorlogin";

    /**
     * Create a request for the method "tutorLogIn".
     *
     * This request holds the parameters needed by the the backEndNodeApi server.  After setting any
     * optional parameters, call the {@link TutorLogIn#execute()} method to invoke the remote
     * operation. <p> {@link
     * TutorLogIn#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param email
     * @param password
     * @since 1.13
     */
    protected TutorLogIn(java.lang.String email, java.lang.String password) {
      super(BackEndNodeApi.this, "GET", REST_PATH, null, com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.Tutor.class);
      this.email = com.google.api.client.util.Preconditions.checkNotNull(email, "Required parameter email must be specified.");
      this.password = com.google.api.client.util.Preconditions.checkNotNull(password, "Required parameter password must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public TutorLogIn setAlt(java.lang.String alt) {
      return (TutorLogIn) super.setAlt(alt);
    }

    @Override
    public TutorLogIn setFields(java.lang.String fields) {
      return (TutorLogIn) super.setFields(fields);
    }

    @Override
    public TutorLogIn setKey(java.lang.String key) {
      return (TutorLogIn) super.setKey(key);
    }

    @Override
    public TutorLogIn setOauthToken(java.lang.String oauthToken) {
      return (TutorLogIn) super.setOauthToken(oauthToken);
    }

    @Override
    public TutorLogIn setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (TutorLogIn) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public TutorLogIn setQuotaUser(java.lang.String quotaUser) {
      return (TutorLogIn) super.setQuotaUser(quotaUser);
    }

    @Override
    public TutorLogIn setUserIp(java.lang.String userIp) {
      return (TutorLogIn) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String email;

    /**

     */
    public java.lang.String getEmail() {
      return email;
    }

    public TutorLogIn setEmail(java.lang.String email) {
      this.email = email;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String password;

    /**

     */
    public java.lang.String getPassword() {
      return password;
    }

    public TutorLogIn setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    @Override
    public TutorLogIn set(String parameterName, Object value) {
      return (TutorLogIn) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updateStudent".
   *
   * This request holds the parameters needed by the backEndNodeApi server.  After setting any
   * optional parameters, call the {@link UpdateStudent#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.Student}
   * @return the request
   */
  public UpdateStudent updateStudent(com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.Student content) throws java.io.IOException {
    UpdateStudent result = new UpdateStudent(content);
    initialize(result);
    return result;
  }

  public class UpdateStudent extends BackEndNodeApiRequest<com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.ConfirmValue> {

    private static final String REST_PATH = "updatestudent";

    /**
     * Create a request for the method "updateStudent".
     *
     * This request holds the parameters needed by the the backEndNodeApi server.  After setting any
     * optional parameters, call the {@link UpdateStudent#execute()} method to invoke the remote
     * operation. <p> {@link UpdateStudent#initialize(com.google.api.client.googleapis.services.Abstra
     * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param content the {@link com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.Student}
     * @since 1.13
     */
    protected UpdateStudent(com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.Student content) {
      super(BackEndNodeApi.this, "PUT", REST_PATH, content, com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.ConfirmValue.class);
    }

    @Override
    public UpdateStudent setAlt(java.lang.String alt) {
      return (UpdateStudent) super.setAlt(alt);
    }

    @Override
    public UpdateStudent setFields(java.lang.String fields) {
      return (UpdateStudent) super.setFields(fields);
    }

    @Override
    public UpdateStudent setKey(java.lang.String key) {
      return (UpdateStudent) super.setKey(key);
    }

    @Override
    public UpdateStudent setOauthToken(java.lang.String oauthToken) {
      return (UpdateStudent) super.setOauthToken(oauthToken);
    }

    @Override
    public UpdateStudent setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UpdateStudent) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UpdateStudent setQuotaUser(java.lang.String quotaUser) {
      return (UpdateStudent) super.setQuotaUser(quotaUser);
    }

    @Override
    public UpdateStudent setUserIp(java.lang.String userIp) {
      return (UpdateStudent) super.setUserIp(userIp);
    }

    @Override
    public UpdateStudent set(String parameterName, Object value) {
      return (UpdateStudent) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updateTutor".
   *
   * This request holds the parameters needed by the backEndNodeApi server.  After setting any
   * optional parameters, call the {@link UpdateTutor#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.Tutor}
   * @return the request
   */
  public UpdateTutor updateTutor(com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.Tutor content) throws java.io.IOException {
    UpdateTutor result = new UpdateTutor(content);
    initialize(result);
    return result;
  }

  public class UpdateTutor extends BackEndNodeApiRequest<com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.ConfirmValue> {

    private static final String REST_PATH = "updatetutor";

    /**
     * Create a request for the method "updateTutor".
     *
     * This request holds the parameters needed by the the backEndNodeApi server.  After setting any
     * optional parameters, call the {@link UpdateTutor#execute()} method to invoke the remote
     * operation. <p> {@link
     * UpdateTutor#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.Tutor}
     * @since 1.13
     */
    protected UpdateTutor(com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.Tutor content) {
      super(BackEndNodeApi.this, "PUT", REST_PATH, content, com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.ConfirmValue.class);
    }

    @Override
    public UpdateTutor setAlt(java.lang.String alt) {
      return (UpdateTutor) super.setAlt(alt);
    }

    @Override
    public UpdateTutor setFields(java.lang.String fields) {
      return (UpdateTutor) super.setFields(fields);
    }

    @Override
    public UpdateTutor setKey(java.lang.String key) {
      return (UpdateTutor) super.setKey(key);
    }

    @Override
    public UpdateTutor setOauthToken(java.lang.String oauthToken) {
      return (UpdateTutor) super.setOauthToken(oauthToken);
    }

    @Override
    public UpdateTutor setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UpdateTutor) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UpdateTutor setQuotaUser(java.lang.String quotaUser) {
      return (UpdateTutor) super.setQuotaUser(quotaUser);
    }

    @Override
    public UpdateTutor setUserIp(java.lang.String userIp) {
      return (UpdateTutor) super.setUserIp(userIp);
    }

    @Override
    public UpdateTutor set(String parameterName, Object value) {
      return (UpdateTutor) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "userLogIn".
   *
   * This request holds the parameters needed by the backEndNodeApi server.  After setting any
   * optional parameters, call the {@link UserLogIn#execute()} method to invoke the remote operation.
   *
   * @param email
   * @param password
   * @return the request
   */
  public UserLogIn userLogIn(java.lang.String email, java.lang.String password) throws java.io.IOException {
    UserLogIn result = new UserLogIn(email, password);
    initialize(result);
    return result;
  }

  public class UserLogIn extends BackEndNodeApiRequest<com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.Student> {

    private static final String REST_PATH = "user_log_in";

    /**
     * Create a request for the method "userLogIn".
     *
     * This request holds the parameters needed by the the backEndNodeApi server.  After setting any
     * optional parameters, call the {@link UserLogIn#execute()} method to invoke the remote
     * operation. <p> {@link
     * UserLogIn#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param email
     * @param password
     * @since 1.13
     */
    protected UserLogIn(java.lang.String email, java.lang.String password) {
      super(BackEndNodeApi.this, "GET", REST_PATH, null, com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.Student.class);
      this.email = com.google.api.client.util.Preconditions.checkNotNull(email, "Required parameter email must be specified.");
      this.password = com.google.api.client.util.Preconditions.checkNotNull(password, "Required parameter password must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public UserLogIn setAlt(java.lang.String alt) {
      return (UserLogIn) super.setAlt(alt);
    }

    @Override
    public UserLogIn setFields(java.lang.String fields) {
      return (UserLogIn) super.setFields(fields);
    }

    @Override
    public UserLogIn setKey(java.lang.String key) {
      return (UserLogIn) super.setKey(key);
    }

    @Override
    public UserLogIn setOauthToken(java.lang.String oauthToken) {
      return (UserLogIn) super.setOauthToken(oauthToken);
    }

    @Override
    public UserLogIn setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UserLogIn) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UserLogIn setQuotaUser(java.lang.String quotaUser) {
      return (UserLogIn) super.setQuotaUser(quotaUser);
    }

    @Override
    public UserLogIn setUserIp(java.lang.String userIp) {
      return (UserLogIn) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String email;

    /**

     */
    public java.lang.String getEmail() {
      return email;
    }

    public UserLogIn setEmail(java.lang.String email) {
      this.email = email;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String password;

    /**

     */
    public java.lang.String getPassword() {
      return password;
    }

    public UserLogIn setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    @Override
    public UserLogIn set(String parameterName, Object value) {
      return (UserLogIn) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "verifyUserInfo".
   *
   * This request holds the parameters needed by the backEndNodeApi server.  After setting any
   * optional parameters, call the {@link VerifyUserInfo#execute()} method to invoke the remote
   * operation.
   *
   * @param email
   * @param password
   * @return the request
   */
  public VerifyUserInfo verifyUserInfo(java.lang.String email, java.lang.String password) throws java.io.IOException {
    VerifyUserInfo result = new VerifyUserInfo(email, password);
    initialize(result);
    return result;
  }

  public class VerifyUserInfo extends BackEndNodeApiRequest<com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.LoginConfirmer> {

    private static final String REST_PATH = "verify_user_info";

    /**
     * Create a request for the method "verifyUserInfo".
     *
     * This request holds the parameters needed by the the backEndNodeApi server.  After setting any
     * optional parameters, call the {@link VerifyUserInfo#execute()} method to invoke the remote
     * operation. <p> {@link VerifyUserInfo#initialize(com.google.api.client.googleapis.services.Abstr
     * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param email
     * @param password
     * @since 1.13
     */
    protected VerifyUserInfo(java.lang.String email, java.lang.String password) {
      super(BackEndNodeApi.this, "GET", REST_PATH, null, com.ucsc.teamtutor.tutrappengine.backEndNodeApi.model.LoginConfirmer.class);
      this.email = com.google.api.client.util.Preconditions.checkNotNull(email, "Required parameter email must be specified.");
      this.password = com.google.api.client.util.Preconditions.checkNotNull(password, "Required parameter password must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public VerifyUserInfo setAlt(java.lang.String alt) {
      return (VerifyUserInfo) super.setAlt(alt);
    }

    @Override
    public VerifyUserInfo setFields(java.lang.String fields) {
      return (VerifyUserInfo) super.setFields(fields);
    }

    @Override
    public VerifyUserInfo setKey(java.lang.String key) {
      return (VerifyUserInfo) super.setKey(key);
    }

    @Override
    public VerifyUserInfo setOauthToken(java.lang.String oauthToken) {
      return (VerifyUserInfo) super.setOauthToken(oauthToken);
    }

    @Override
    public VerifyUserInfo setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (VerifyUserInfo) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public VerifyUserInfo setQuotaUser(java.lang.String quotaUser) {
      return (VerifyUserInfo) super.setQuotaUser(quotaUser);
    }

    @Override
    public VerifyUserInfo setUserIp(java.lang.String userIp) {
      return (VerifyUserInfo) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String email;

    /**

     */
    public java.lang.String getEmail() {
      return email;
    }

    public VerifyUserInfo setEmail(java.lang.String email) {
      this.email = email;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String password;

    /**

     */
    public java.lang.String getPassword() {
      return password;
    }

    public VerifyUserInfo setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    @Override
    public VerifyUserInfo set(String parameterName, Object value) {
      return (VerifyUserInfo) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link BackEndNodeApi}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link BackEndNodeApi}. */
    @Override
    public BackEndNodeApi build() {
      return new BackEndNodeApi(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link BackEndNodeApiRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setBackEndNodeApiRequestInitializer(
        BackEndNodeApiRequestInitializer backendnodeapiRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(backendnodeapiRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
